step_sizes = np.geomspace(0.1, 0.7, 20)

error_tol = 1e-7
x0 = 0
x1 = 100
integrator = Kronrod21()  # or Gauss21()
fun=DoublePendulumInteg(x0, x1)  # random sampled with energy = 20


----scaler---
    scaler = scaler_integ.pkl
    

----model----
    dim_state = dim_state * (memory + 1)
    n_hidden = 5 * dim_state

    inputs = tf.keras.Input(shape=(dim_state,), name='state')
    x = tf.keras.layers.Dense(n_hidden, activation='relu')(inputs)
    x = tf.keras.layers.Dense(n_hidden, activation='relu')(x)
    x = tf.keras.layers.Dense(n_hidden, activation='relu')(x)
    x = tf.keras.layers.Dense(n_hidden, activation='relu')(x)
    outputs = tf.keras.layers.Dense(dim_action)(x)

    model = tf.keras.Model(inputs=inputs, outputs=outputs)


quad tols:
